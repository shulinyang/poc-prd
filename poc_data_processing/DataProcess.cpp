#include "DataProcess.h"
#include <fstream>
#include <ios>

int GetnItem(std::string FileName)
{
	string line;
	ifstream inputStream(FileName);
	if( !inputStream )
	{
		cerr << "Error opening input stream" << endl;
		return 0;
	}
	getline(inputStream,line);
	char *buf=(char *)line.c_str();
	int n=0;
	for(;isspace(*buf);buf++);
	for(;*buf;)
	{
		n++;
		for(;!isspace(*buf)&&*buf;buf++);
		for(;isspace(*buf)&&*buf;buf++);
	}
	inputStream.close();
	return n;
}


DataItem::DataItem()
	:min(0), max(0), maxv(1), minv(0), nhist(0), avg(0), scale(true)
{

}


void DataItem::SetData(unsigned long i,double value)
{
    if(value < min) min =value;
    if(value > max) max =value;
    sum +=value;
    sum -=data[i];
    data[i]=value;
    avg=sum / data.size();

}

void DataItem::Add(double value)
{
	if(data.size()==0)
	{
		min =value;
		max =value;
	}
	if(value < min) min =value;
	if(value > max) max =value;
	sum +=value;
	data.push_back(value);
	avg=sum / data.size();
}

void DataItem::Scale( double iminv,double imaxv )
{
	minv=iminv;
	maxv=imaxv;
	Scale();
}

void DataItem::Scale()
{
	if(!scale) return;
	unsigned long i=0;
	for(i=0;i<data.size(); i++)
	{
		data[i]= (((maxv-minv)*(data[i]-min))/(max-min))+minv;
	}

}


DataProcess::DataProcess()
{
    //ctor
    srand( static_cast<unsigned int>(time(0)) );
}


int DataProcess::ReadLine(string line)
{
	double v;
	char *buf=(char *)line.c_str();
	line_data.clear();

	for(;isspace(*buf);buf++);
	for(;*buf;)
	{
		sscanf(buf,"%lf",&v);
		line_data.push_back(v);
		for(;!isspace(*buf)&&*buf;buf++);
		for(;isspace(*buf)&&*buf;buf++);
	}

	if(nItem != line_data.size())
		return -1;
	for(unsigned int i=0;i<nItem;i++)
		items[i]->Add(line_data[i]);
	return 0;
}

// çalýþýyor
bool DataProcess::LoadRawData(std::string filename)
{
	string line;
	nItem=GetnItem(filename);
	ifstream inputStream(filename);
	if( !inputStream )
	{
		cerr << "Error opening input stream" << endl;
		return false;
	}
	for(unsigned int i=0;i<nItem;i++)
		items.push_back(new DataItem());

	int i=1;
	while (getline(inputStream,line))
	{
		if( ReadLine(line)==-1)
		{
			cout << "Error Line : " << i;
			break;
	//       return false;
		}
		else
			cout << "Line : " << i << " Processed\n";
		i++;
	};
	nData=i-1;
	inputStream.close();
	return true;
}

void DataProcess::ScaleAll()
{
	for(unsigned int i=0; i<nItem; i++)
	{
		items[i]->Scale();
	}
}


DataItem* DataProcess::GetItem(int i)
{
	return items[i];
}

bool DataProcess::WriteScaleParameters(char *FileName)
{
	ofstream out;
	string s;
	string fname=FileName;
	fname+="-scale.txt";
	out.open(fname.c_str(),std::ios::out);
	if( !out.is_open() ) return false;
	out << "Scaling Parameters Text File generated by FannTool \n";
	out << "Column No  ( Minimum , Maximum ) --> ( Minimum Out , Maximum Out ) \n";
	for(unsigned int j=0; j<nItem; j++)
	{
		if(items[j]->scale)
			out <<j+1<<" ( "<<items[j]->GetMin()<<" , "<<items[j]->GetMax()<<" ) --> ( "<<items[j]->GetMinV()<<" , "<<items[j]->GetMaxV()<<" ) \n";
		else
			out <<"j+1 ( items[j]->GetMin() , items[j]->GetMax() ) --> Not Scaled \n";
	}

	out.close();
	return true;
}

bool DataProcess::WriteData(std::string FileName,int nOut, double pTrain)
{
	ofstream out;
	string s;
	unsigned long nTrainData,nTestData;
	// pTrain = 0.7 ise 0.6 ya yuvarlýyor gibi
	if(pTrain > 1.0) pTrain=1.0;
	if(pTrain < 0.5) pTrain=0.5;
	nTrainData=static_cast<unsigned long>(GetNData()*pTrain);
	nTestData=static_cast<unsigned long>(GetNData()-nTrainData);
	int nInput=nItem-nOut;
	char buf[50];
	string fname=FileName;
	fname+="-train.dat";
	out.open(fname.c_str(),std::ios::out);
	if( !out.is_open() ) return false;
	out<<nTrainData<<" "<<nInput<<" "<<nOut<<" \n";

	for(unsigned long n=0; n<nTrainData; n++)
	{
		s="";
		for(int i=0; i<nInput; i++)
		{
			sprintf(buf,"%lf ",items[i]->GetData(n));
			s+=buf;
		}
		s+="\n";
		out << s.c_str();
		s="";
		for(unsigned int i=nInput; i<nItem; i++)
		{
			sprintf(buf,"%lf ",items[i]->GetData(n));
			s+=buf;
		}
		s+="\n";
		out<<s.c_str();
	}
	out.close();

	if(nTestData)
	{
		fname=FileName;
		fname+="-test.dat";
		out.open(fname.c_str(), std::ios::out);
		if( !out.is_open() ) return false;
		out<<nTestData<<" "<<nInput<< " " << nOut<< " \n";
		for(unsigned long n=nTrainData; n<nData; n++)
		{
			s="";
			for(int i=0; i<nInput; i++)
			{
				sprintf(buf,"%f ",items[i]->GetData(n));
				s+=buf;
			}
			s+="\n";
			out <<s.c_str();
			s="";
			for(unsigned int i=nInput; i<nItem; i++)
			{
				sprintf(buf,"%f ",items[i]->GetData(n));
				s+=buf;
			}
			s+="\n";
			out <<s.c_str();
		}
	out.close();
	}
	return true;
}

void DataProcess::Shuffle()
{
	unsigned long swap;
	for(unsigned long i = 0; i < nData /2 ; i++)
	{
		swap = (unsigned long) (rand() % (unsigned long)nData);
		if(i!=swap)
		{
			for(unsigned int j=0; j<nItem; j++)
				items[j]->Swap(i,swap);
		}
	}
}


DataProcess::~DataProcess()
{
	for(unsigned int j=0; j<nItem; j++)
		delete (items[j]);
}
